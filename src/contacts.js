const contacts=document.getElementsByClassName("contacts")[0],stickyHeader=document.getElementsByClassName("stickyHeader")[0],elements=document.getElementsByClassName("contact");function createContact(t,e){let n=document.createElement("div");return n.setAttribute("data-number",t),n.textContent=t,n.classList.add("contact"),e.appendChild(n),n}function deleteContacts(t=0,e,n,o){for(let c=t;c<e;c++)for(;n[c];)o.removeChild(n[c])}function addContacts(t=0,e=100,n=!1,o){const c=document.createDocumentFragment();let s=Math.round(o.clientHeight/2+100);if(e<1e5){for(let n=t;n<e;n++){let o=createContact(n,c);n==t&&observer_up.observe(o),n==e-6&&observer_down.observe(o)}n?(s+=800,o.prepend(c)):(s-=200,o.appendChild(c)),o.scrollTop=s}}contacts.addEventListener("scroll",t=>{const e=Array.from(contacts.getElementsByClassName("contact")),n=e.map(t=>t.offsetTop).findIndex(t=>contacts.scrollTop-t<=-18);-1!==n&&(stickyHeader.textContent=Number(e[n].textContent)-1)});const config={root:contacts,rootMargin:"5px",threshold:1};let observer_down=new IntersectionObserver(function(t){t.forEach(t=>{if(t.isIntersecting){const e=Number(t.target.getAttribute("data-number"));observer_down.unobserve(t.target),deleteContacts(0,e-100,elements,contacts),addContacts(e,e+100,!1,contacts)}})},config),observer_up=new IntersectionObserver(function(t){t.forEach(t=>{if(t.isIntersecting){const e=Number(t.target.getAttribute("data-number"));if(observer_up.unobserve(t.target),e-100>0)deleteContacts(e,e+120,elements,contacts),addContacts(e-100,e,!0,contacts);else if(e>1){deleteContacts(100,Array.from(contacts.getElementsByClassName("contact")).length,elements,contacts),addContacts(0,e,!0,contacts)}}})},config);window.onload=function(){addContacts(0,120,!0,contacts);let t=document.createElement("script");t.src="stats.js",document.body.append(t)};